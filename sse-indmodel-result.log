Linear part: No equation.
Convergent part:
dec(enc(x,k),k) = x
Search(BuildIndex(Ap,w,kT),Trapdoor(w,kT)) = Ap
Completing equations...
Completed equations:
Search(BuildIndex(Ap,w,kT),Trapdoor(w,kT)) = Ap
dec(enc(x,k),k) = x
Biprocess 0 (that is, the initial process):
{1}new W0: channel;
{2}new W1: channel;
{3}out(W0, (w01,w02,w03,w04));
{4}out(W1, (w11,w12,w13,w14));
{5}out(m01, w01);
{6}out(m02, (w01,w02));
{7}out(m03, (w01,w02,w03));
{8}out(m04, w04);
{9}out(m11, w11);
{10}out(m12, (w11,w12));
{11}out(m13, (w11,w12,w13));
{12}out(m14, w14);
{13}new D0: channel;
{14}new D1: channel;
{15}out(D0, (m01,m02,m03,m04));
{16}out(D1, (m11,m12,m13,m14));
{17}let cb1: bitstring = enc(choice[m01,m11],skey) in
{18}let cb2: bitstring = enc(choice[m02,m12],skey) in
{19}let cb3: bitstring = enc(choice[m03,m13],skey) in
{20}let cb4: bitstring = enc(choice[m04,m14],skey) in
{21}new Cb: channel;
{22}out(Cb, (cb1,cb2,cb3,cb4));
{23}new APb1: channel;
{24}new APb2: channel;
{25}new APb3: channel;
{26}new APb4: channel;
{27}out(APb1, cb1);
{28}out(APb1, cb2);
{29}out(APb1, cb3);
{30}out(APb2, cb2);
{31}out(APb2, cb3);
{32}out(APb3, cb3);
{33}out(APb4, cb4);
{34}let Indexb1: bitstring = BuildIndex(APb1,choice[w01,w11],skeyT) in
{35}let Indexb2: bitstring = BuildIndex(APb2,choice[w02,w12],skeyT) in
{36}let Indexb3: bitstring = BuildIndex(APb3,choice[w03,w13],skeyT) in
{37}let Indexb4: bitstring = BuildIndex(APb4,choice[w04,w14],skeyT) in
{38}new Ib: channel;
{39}out(Ib, (Indexb1,Indexb2,Indexb3,Indexb4));
{40}out(CH, (D0,D1,W0,W1));
{41}out(CH, (Cb,Ib));
{42}out(CH, Trapdoor(choice[w01,w11],skeyT));
{43}out(CH, Trapdoor(choice[w02,w12],skeyT));
{44}out(CH, Trapdoor(choice[w03,w13],skeyT));
{45}out(CH, Trapdoor(choice[w04,w14],skeyT))

-- Observational equivalence in biprocess 1 (that is, biprocess 0, with let moved downwards):
{1}new W0: channel;
{2}new W1: channel;
{3}out(W0, (w01,w02,w03,w04));
{4}out(W1, (w11,w12,w13,w14));
{5}out(m01, w01);
{6}out(m02, (w01,w02));
{7}out(m03, (w01,w02,w03));
{8}out(m04, w04);
{9}out(m11, w11);
{10}out(m12, (w11,w12));
{11}out(m13, (w11,w12,w13));
{12}out(m14, w14);
{13}new D0: channel;
{14}new D1: channel;
{15}out(D0, (m01,m02,m03,m04));
{16}out(D1, (m11,m12,m13,m14));
{21}new Cb: channel;
{20}let cb4: bitstring = enc(choice[m04,m14],skey) in
{19}let cb3: bitstring = enc(choice[m03,m13],skey) in
{18}let cb2: bitstring = enc(choice[m02,m12],skey) in
{17}let cb1: bitstring = enc(choice[m01,m11],skey) in
{22}out(Cb, (cb1,cb2,cb3,cb4));
{23}new APb1: channel;
{24}new APb2: channel;
{25}new APb3: channel;
{26}new APb4: channel;
{27}out(APb1, cb1);
{28}out(APb1, cb2);
{29}out(APb1, cb3);
{30}out(APb2, cb2);
{31}out(APb2, cb3);
{32}out(APb3, cb3);
{33}out(APb4, cb4);
{38}new Ib: channel;
{37}let Indexb4: bitstring = BuildIndex(APb4,choice[w04,w14],skeyT) in
{36}let Indexb3: bitstring = BuildIndex(APb3,choice[w03,w13],skeyT) in
{35}let Indexb2: bitstring = BuildIndex(APb2,choice[w02,w12],skeyT) in
{34}let Indexb1: bitstring = BuildIndex(APb1,choice[w01,w11],skeyT) in
{39}out(Ib, (Indexb1,Indexb2,Indexb3,Indexb4));
{40}out(CH, (D0,D1,W0,W1));
{41}out(CH, (Cb,Ib));
{42}out(CH, Trapdoor(choice[w01,w11],skeyT));
{43}out(CH, Trapdoor(choice[w02,w12],skeyT));
{44}out(CH, Trapdoor(choice[w03,w13],skeyT));
{45}out(CH, Trapdoor(choice[w04,w14],skeyT))

Translating the process into Horn clauses...
Termination warning: v ≠ v_1 && attacker2(v_2,v) && attacker2(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker2(v,v_2) && attacker2(v_1,v_2) -> bad
Selecting 0
Completing...
Termination warning: v ≠ v_1 && attacker2(v_2,v) && attacker2(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker2(v,v_2) && attacker2(v_1,v_2) -> bad
Selecting 0
200 rules inserted. Base: 171 rules (68 with conclusion selected). Queue: 2 rules.
RESULT Observational equivalence is true.

--------------------------------------------------------------
Verification summary:

Observational equivalence is true.

--------------------------------------------------------------
