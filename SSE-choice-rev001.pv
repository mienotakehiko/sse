free ch:channel.
free m1:bitstring [private].
free m2:bitstring [private].
free m3:bitstring [private].
free m4:bitstring [private].
free m5:bitstring [private].

const w1:bitstring[private].
const w2:bitstring[private].

free w3:bitstring[private].
free w4:bitstring [private].
free w5:bitstring [private].
free k1:bitstring [private].
free k2:bitstring [private].

event SUCCESS1.
event SUCCESS2.
event SUCCESS3.
event SUCCESS4.

type trapdoor.
fun maketrap(bitstring,bitstring):trapdoor.
table Index(trapdoor,nat).
table angouID(nat,bitstring).

fun enc(bitstring, bitstring):bitstring.
fun dec(bitstring, bitstring):bitstring.
equation forall x:bitstring, k:bitstring; dec(enc(x,k),k) = x. 

fun con(bitstring,nat):bitstring.
fun divideB(bitstring):bitstring.
equation forall x:bitstring, n:nat; divideB(con(x,n)) = x.
reduc forall x:bitstring, n:nat; divideN(con(x,n))=n.

let Serverprocess =
  insert angouID(1,enc(m1,k2));   
  insert angouID(2,enc(m2,k2));
  insert angouID(3,enc(m3,k2));
  insert angouID(4,enc(m4,k2));
  insert angouID(5,enc(m5,k2));
  insert Index(maketrap(con(w1,1),k1) , 1  );
  insert Index(maketrap(con(w1,6),k1) , 2  );
  insert Index(maketrap(con(w1,2),k1) , 5  );
  insert Index(maketrap(con(w1,3),k1) , 3  );
  insert Index(maketrap(con(w1,4),k1) , 4  );
  insert Index(maketrap(con(w2,1),k1) , 1  );
  insert Index(maketrap(con(w2,2),k1) , 2  );
  insert Index(maketrap(con(w2,7),k1) , 3  );
  insert Index(maketrap(con(w2,3),k1) , 5  );
  insert Index(maketrap(con(w2,8),k1) , 4  );
  insert Index(maketrap(con(w2,4),k1) , 5  );
  insert Index(maketrap(con(w3,1),k1) , 1  );
  insert Index(maketrap(con(w3,6),k1) , 2  );
  insert Index(maketrap(con(w3,2),k1) , 5  );
  insert Index(maketrap(con(w3,3),k1) , 3  );
  insert Index(maketrap(con(w3,8),k1) , 4  );
  insert Index(maketrap(con(w3,4),k1) , 5  );
  insert Index(maketrap(con(w4,1),k1) , 5  );
  insert Index(maketrap(con(w4,2),k1) , 5  );
  insert Index(maketrap(con(w4,3),k1) , 5  );
  insert Index(maketrap(con(w4,4),k1) , 5  );
  insert Index(maketrap(con(w5,1),k1) , 5  );
  insert Index(maketrap(con(w5,2),k1) , 5  );
  insert Index(maketrap(con(w5,3),k1) , 5  );
  insert Index(maketrap(con(w5,4),k1) , 5  ).

let SServer =
 in(ch, tw:trapdoor);
 get Index(=tw,id) in
  get angouID(=id,c) in
   out(ch,c).

(* Clientprocess *)

let ClientSEND (wq:bitstring) = 
 out(ch, maketrap(con(wq,1),k1));
 out(ch, maketrap(con(wq,2),k1));
 out(ch, maketrap(con(wq,3),k1));
 out(ch, maketrap(con(wq,4),k1)).


let ClientSENDchoice (wq1:bitstring,wq2:bitstring) = 
 out(ch, choice[maketrap(con(wq1,1),k1),maketrap(con(wq2,1),k1)]);
 out(ch, choice[maketrap(con(wq1,2),k1),maketrap(con(wq2,2),k1)]);
 out(ch, choice[maketrap(con(wq1,3),k1),maketrap(con(wq2,3),k1)]);
 out(ch, choice[maketrap(con(wq1,4),k1),maketrap(con(wq2,4),k1)]).


let ClientRES (mc:bitstring,mn:nat)  =
 in(ch, C:bitstring);
 let d=dec(C,k2) in
 (  
 if (d=mc) then 
  event SUCCESS1
 else 0
). 
process ( (*ClientSEND(w3)*) ClientSENDchoice(w1,w3) 
 | ClientRES(m1,1) |ClientRES(m2,2) |ClientRES(m3,3) | Serverprocess | !SServer) 

